" {{{1 XDG SUPPORT

if has("nvim")
    try
        source $HOME/.config/nvim/init.lua
    catch
        echohl ErrorMsg
        echom v:exception
        echohl NONE
    finally
        finish
    endtry
endif

if empty($MYVIMRC) | let $MYVIMRC = expand('<sfile>:p') | endif

if empty($XDG_CACHE_HOME)  | let $XDG_CACHE_HOME  = $HOME . "/.cache"       | endif
if empty($XDG_CONFIG_HOME) | let $XDG_CONFIG_HOME = $HOME . "/.config"      | endif
if empty($XDG_DATA_HOME)   | let $XDG_DATA_HOME   = $HOME . "/.local/share" | endif
if empty($XDG_STATE_HOME)  | let $XDG_STATE_HOME  = $HOME . "/.local/state" | endif

set runtimepath^=$XDG_DATA_HOME/vim
set runtimepath^=$XDG_CONFIG_HOME/vim
set runtimepath+=$XDG_CONFIG_HOME/vim/after

set packpath^=$XDG_DATA_HOME/vim,$XDG_CONFIG_HOME/vim
set packpath+=$XDG_CONFIG_HOME/vim/after,$XDG_DATA_HOME/vim/after

let g:netrw_home = $XDG_DATA_HOME . "/vim"

set backupdir=$XDG_STATE_HOME/vim/backup// | call mkdir(&backupdir, 'p', 0700)
set directory=$XDG_STATE_HOME/vim/swap//   | call mkdir(&directory, 'p', 0700)
set undodir=$XDG_STATE_HOME/vim/undo//     | call mkdir(&undodir,   'p', 0700)
set viewdir=$XDG_STATE_HOME/vim/view//     | call mkdir(&viewdir,   'p', 0700)

call mkdir($XDG_DATA_HOME."/vim/spell", 'p', 0700)
set spellfile=$XDG_DATA_HOME/vim/spell/en.utf-8.add

set viminfofile=$XDG_STATE_HOME/vim/viminfo


" {{{1 DEFAULTS.VIM
set backspace=indent,eol,start      " Allow backspacing over everything in insert mode

set history=1000	        " keep 1000 lines of command line history
set ruler                   " show the cursor position all the time
set showcmd	                " display incomplete commands
set wildmenu		        " display completion matches in a status line

set ttimeout		        " time out for key codes
set ttimeoutlen=50	        " wait up to 50ms after Esc for special key

set display+=lastline

set scrolloff=3             " show a few lines of context around the cursor
set sidescrolloff=5

set incsearch               " do incremental searching
set nrformats-=octal        " do not recognize octal numbers for Ctrl-A and Ctrl-X

" CTRL-U only deletes entered character and not always the whole line: fix that
" Use CTRL-G u to first break undo, so that you can undo CTRL-U after inserting a line break
inoremap <C-U> <C-G>u<C-\><C-O>d0

" Switch syntax highlighting on, when the terminal has colors
if &t_Co > 2 || has("gui_running")
    syntax enable
endif


if has("autocmd")
    " Enable file type detection.
    " Also load indent files, to automatically do language-dependent indenting.
    filetype plugin indent on

    augroup vimrcEx
        autocmd!

        " When editing a file, always jump to the last known cursor position.
        autocmd BufReadPost *
            \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
            \ |   exe "normal! g`\""
            \ | endif
    augroup END
endif

" Prevent that the langmap option applies to characters that result from a mapping
if has('langmap') && exists('+langnoremap')
    set langnoremap
endif


" {{{1 GENERAL OPTIONS

let mapleader = " "
let maplocalleader = " "

set formatoptions+=j    " delete comment character when joining commented lines
set autoread

set shortmess+=I        " don't display message when running vim without file

" Replace patterns act on every occurence in line by default
" (and use g-flag to use default behavior)
set gdefault

set wildmode=longest:full,full   " when tabing, complete the longest, then disp list
set wildcharm=<C-z>              " autocompletion character in macros

set ignorecase
set smartcase           " case-sensitive search only when at least one capital letter

set path+=**            " set recursive path to use :find

set splitright          " new splits on the right...
set splitbelow          " ... and below

set expandtab
set smarttab

set shiftwidth=4
set tabstop=4
set shiftround

set autoindent
set smartindent

set linebreak           " break line between words during wrap
set lazyredraw          " don't update screen during macros

set smoothscroll

set foldlevelstart=0
set foldmethod=syntax

set notagrelative       " cf plugin/hidden_tags.vim
set switchbuf=usetab    " jump to the first tab that contains buffer for quickfix commands

set viewoptions-=options        " To omit local options when restoring file (cf. mkview, loadview)
set sessionoptions-=buffers
set sessionoptions-=folds
set sessionoptions-=options     " To restore syntax highlighting when restoring session (unzoom)
set sessionoptions-=winsize

set bufhidden=delete    " To delete buffer instead of just unloading them

set nojoinspaces        " Only add a single space when `J`oining two lines, even if it ends with '.'

set complete-=i                 " Remove include completion (too slow)
set completeopt+=longest        " Only insert longest common text in autocompletion

set commentstring=#\ %s     " Set default comment type in files without syntax

let g:is_bash = 1               " Set bash syntax instead of sh...
let g:sh_fold_enabled = 4       " ...and enable folding
let g:vimsyn_folding = 'afP'

if has("autocmd")
    augroup dashKeyword
        autocmd!

        " Add - to word limit in text, markdown and bash files
        autocmd FileType text,markdown,sh,bib,tex setlocal iskeyword+=\-
    augroup END
endif

if has('mouse')
    set mouse=a
endif

set backup
set undofile

set viminfo+='1000

set dictionary+=/usr/share/dict/words

colorscheme molokai_custom
filetype detect


" {{{1 PACKAGES

" Toggle vim default packages

let g:loaded_2html_plugin = 1
let g:loaded_getscriptPlugin = 1
let g:loaded_logipat = 1
let g:loaded_rrhelper = 1
let g:loaded_vimballPlugin = 1


call plug#begin($XDG_DATA_HOME . "/vim/plug-packages/")

Plug 'AndrewRadev/linediff.vim'
Plug 'Konfekt/FastFold'
Plug 'LunarWatcher/auto-pairs'
Plug 'Vimjas/vim-python-pep8-indent'
Plug 'airblade/vim-gitgutter'
Plug 'andymass/vim-matchup'
Plug 'bfrg/vim-cpp-modern'
Plug 'christoomey/vim-tmux-navigator'
Plug 'dhruvasagar/vim-zoom'
Plug 'ekalinin/Dockerfile.vim'
Plug 'jeetsukumaran/vim-pythonsense'
Plug 'kana/vim-operator-user'
Plug 'lervag/vimtex'
Plug 'markonm/traces.vim'
Plug 'michaeljsmith/vim-indent-object'
Plug 'ntpeters/vim-better-whitespace'
Plug 'powerman/vim-plugin-AnsiEsc'
Plug 'preservim/tagbar'
Plug 'rhysd/vim-clang-format'
Plug 'romainl/vim-qf'
Plug 'ryvnf/readline.vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'vim-python/python-syntax'
Plug 'vim-utils/vim-all'
Plug 'wellle/targets.vim'
Plug 'zhimsel/vim-stay'

call plug#end()


" Ansi-Esc
let g:no_cecutil_maps = 1
let g:no_ansiesc_menu = 1


" Auto-pairs
let g:AutoPairsCenterLine = 0
let g:AutoPairsMapBS = 1
let g:AutoPairsMoveExpression = ''
let g:AutoPairsMultilineFastWrap = 1
let g:AutoPairsPreferClose = 0

let g:AutoPairsShortcutBackInsert = '<M-c>'
let g:AutoPairsShortcutFastWrap = '<M-e>'
let g:AutoPairsShortcutIgnore = ''
let g:AutoPairsShortcutJump = '<M-v>'
let g:AutoPairsShortcutToggle = ''
let g:AutoPairsShortcutToggleMultilineClose = ''


" Better Whitespace
nnoremap ]w <Cmd>NextTrailingWhitespace<CR>
nnoremap [w <Cmd>PrevTrailingWhitespace<CR>


" GitGutter
set updatetime=100
let g:gitgutter_enabled = 0
let g:gitgutter_highlight_lines = 1
let g:gitgutter_preview_win_floating = 1

nnoremap <silent> <leader>g <Cmd>GitGutterToggle \| echo "GitGutter " . (g:gitgutter_enabled ? "enabled" : "disabled")<CR>
nnoremap <silent><expr> zg (g:gitgutter_enabled ? ":GitGutterFold<CR>" : "zg")
nmap [h <Plug>(GitGutterPrevHunk)
nmap ]h <Plug>(GitGutterNextHunk)

xnoremap <Plug>(GitGutterStageNextHunk) <Cmd>execute "normal \<Plug>(GitGutterStageHunk)\<Plug>(GitGutterNextHunk)" \| silent! call repeat#set("\<lt>Plug>(GitGutterStageNextHunk)")<CR>
nnoremap <Plug>(GitGutterStageNextHunk) <Cmd>execute "normal \<Plug>(GitGutterStageHunk)\<Plug>(GitGutterNextHunk)" \| silent! call repeat#set("\<lt>Plug>(GitGutterStageNextHunk)")<CR>
xmap <leader>hs <Plug>(GitGutterStageNextHunk)
nmap <leader>hs <Plug>(GitGutterStageNextHunk)
xmap <leader>hS <Plug>(GitGutterStageHunk)
nmap <leader>hS <Plug>(GitGutterStageHunk)

highlight GitGutterStatuslineAdd    ctermfg=2 ctermbg=238
highlight GitGutterStatuslineChange ctermfg=3 ctermbg=238
highlight GitGutterStatuslineDelete ctermfg=1 ctermbg=238

highlight GitGutterStatuslineAddNC    cterm=bold ctermfg=2 ctermbg=244
highlight GitGutterStatuslineChangeNC cterm=bold ctermfg=3 ctermbg=244
highlight GitGutterStatuslineDeleteNC cterm=bold ctermfg=1 ctermbg=244

let g:fastfold_minlines = 10


" Linediff
let g:linediff_indent = 1


" Markdown
let g:vim_markdown_toc_autofit = 1
let g:vim_markdown_follow_anchor = 1
let g:vim_markdown_strikethrough = 1
let g:vim_markdown_new_list_item_indent = 2
let g:vim_markdown_folding_style_pythonic = 1


" Matchup
let g:matchup_matchparen_offscreen = {}


" Python syntax
let g:python_highlight_all = 1


" Python indent
let g:python_pep8_indent_multiline_string = -2


" Qf
nmap <leader>ak <Plug>(qf_qf_previous) \| <Plug>(qf_loc_previous)
nmap <leader>aj <Plug>(qf_qf_next) \| <Plug>(qf_loc_next)
nmap <leader>as <Plug>(qf_qf_switch)
function s:ToggleQfOrLoc()
    if !empty(getqflist())
        return "\<Plug>(qf_qf_toggle)"
    elseif !empty(getloclist(0))
        return "\<Plug>(qf_loc_toggle)"
    endif
    return ""
endfunction
nmap <expr> <leader>aa <SID>ToggleQfOrLoc()

nnoremap <expr> [s (&spell ? "[s" : "\<Plug>(qf_qf_previous) \| \<Plug>(qf_loc_previous)")
nnoremap <expr> ]s (&spell ? "]s" : "\<Plug>(qf_qf_next) \| \<Plug>(qf_loc_next)")


" Readline
let g:readline_ctrl_t = 0


" Tagbar
let g:tagbar_position = 'topleft vertical'
let g:tagbar_sort = 0
let g:tagbar_autofocus = 1
let g:tagbar_autoclose = 1
let g:tagbar_jump_offset = 100
augroup tagbarMap
    autocmd!

    autocmd BufEnter * if &ft != "markdown" | nnoremap <buffer> <leader>c <Cmd>TagbarOpen j<CR> | endif
augroup END


" Vim/Tmux navigator
let g:tmux_navigator_no_mappings = 1
let g:tmux_navigator_disable_when_zoomed = 1
let g:tmux_navigator_resize_step = 2
noremap <silent> <M-h> <Cmd>TmuxNavigateLeft<CR>
noremap <silent> <M-j> <Cmd>TmuxNavigateDown<CR>
noremap <silent> <M-k> <Cmd>TmuxNavigateUp<CR>
noremap <silent> <M-l> <Cmd>TmuxNavigateRight<CR>

lnoremap <silent> <M-h> <Cmd>TmuxNavigateLeft<CR>
lnoremap <silent> <M-j> <Cmd>TmuxNavigateDown<CR>
lnoremap <silent> <M-k> <Cmd>TmuxNavigateUp<CR>
lnoremap <silent> <M-l> <Cmd>TmuxNavigateRight<CR>

tnoremap <silent> <M-h> <Cmd>TmuxNavigateLeft<CR>
tnoremap <silent> <M-j> <Cmd>TmuxNavigateDown<CR>
tnoremap <silent> <M-k> <Cmd>TmuxNavigateUp<CR>
tnoremap <silent> <M-l> <Cmd>TmuxNavigateRight<CR>

noremap <silent> <M-H> <Cmd>TmuxResizeLeft<CR>
noremap <silent> <M-J> <Cmd>TmuxResizeDown<CR>
noremap <silent> <M-K> <Cmd>TmuxResizeUp<CR>
noremap <silent> <M-L> <Cmd>TmuxResizeRight<CR>

lnoremap <silent> <M-H> <Cmd>TmuxResizeLeft<CR>
lnoremap <silent> <M-J> <Cmd>TmuxResizeDown<CR>
lnoremap <silent> <M-K> <Cmd>TmuxResizeUp<CR>
lnoremap <silent> <M-L> <Cmd>TmuxResizeRight<CR>

tnoremap <silent> <M-H> <Cmd>TmuxResizeLeft<CR>
tnoremap <silent> <M-J> <Cmd>TmuxResizeDown<CR>
tnoremap <silent> <M-K> <Cmd>TmuxResizeUp<CR>
tnoremap <silent> <M-L> <Cmd>TmuxResizeRight<CR>


" Vimtex
let g:vimtex_fold_enabled = 1
let g:vimtex_compiler_latexmk = {'continuous': 0}
let g:vimtex_quickfix_ignore_filters = ['Underfull', 'Overfull', 'Font Warning']
augroup vimtexSingleCompile
    autocmd!

    autocmd FileType tex nmap <localleader>ll <Plug>(vimtex-compile-ss)
augroup END


" Zoom pane
let g:zoom#statustext = '[Z]'
nmap <leader>z <Plug>(zoom-toggle)


" {{{1 USER MAPPINGS

" Edit and reload vim config
nnoremap <leader>e <Cmd>call <SID>OpenInSplitIfNotEmpty($MYVIMRC)<CR>
nnoremap <leader>E <Cmd>tabnew $MYVIMRC<CR>
nnoremap <leader>r <Cmd>source $MYVIMRC \| redraw \| echo "Config reloaded !"<CR>

" Set help by default in vertical split (with h[elp]) or new tab (with H[elp])
cnoreabbrev <expr> h ((getcmdtype() == ':' && getcmdpos() <= 2)? 'vert h' : 'h')
cnoreabbrev <expr> help ((getcmdtype() == ':' && getcmdpos() <= 5)? 'vert help' : 'help')
cnoreabbrev <expr> H ((getcmdtype() == ':' && getcmdpos() <= 2)? 'tab h' : 'H')
cnoreabbrev <expr> Help ((getcmdtype() == ':' && getcmdpos() <= 5)? 'tab help' : 'Help')

" Write file with <leader>w
nnoremap <leader>w <Cmd>update<CR>

" Make with <leader>m
nnoremap <leader>m <Cmd>execute 'silent !clear' \| silent make \| redraw! \| cwindow<CR>

" Split
nnoremap <silent> <leader>\ <Cmd>vsplit<CR>
nnoremap <silent> <leader><bar> <Cmd>vsplit \| enew<CR>
nnoremap <silent> <leader>- <Cmd>split<CR>
nnoremap <silent> <leader>_ <Cmd>split \| enew<CR>
nnoremap <silent> <leader>= <C-w>=
nnoremap <silent> <leader>q <Cmd>call <SID>CloseWin()<CR>

" Move splits around
nnoremap <leader>H <C-w>H
nnoremap <leader>J <C-w>J
nnoremap <leader>K <C-w>K
nnoremap <leader>L <C-w>L

" Tabs
nnoremap <silent> <leader>t <Cmd>tab split<CR>
nnoremap <silent> <leader>T <Cmd>tabnew<CR>

function s:TabSwitch(count)
    let l:target_tab = (tabpagenr() + a:count - 1) % tabpagenr('$') + 1
    execute "tabnext " . l:target_tab
endfunction
nnoremap <silent> <leader>n <Cmd>call <SID>TabSwitch(v:count1)<CR>
nnoremap <silent> <leader>p <Cmd>call <SID>TabSwitch(tabpagenr('$')-v:count1)<CR>
nnoremap <silent> ]<Tab> <Cmd>call <SID>TabSwitch(v:count1)<CR>
nnoremap <silent> [<Tab> <Cmd>call <SID>TabSwitch(tabpagenr('$')-v:count1)<CR>

nnoremap <silent> <leader>0 <Cmd>$tabnext<CR>
for s:i in range(1, 9)
    execute "nnoremap <silent> <leader>" . s:i . " :" . s:i . "tabnext<CR>"
endfor

function s:TabMove(count)
    let l:target_count = (tabpagenr() + a:count) % (tabpagenr('$') + 1)
    execute "tabmove " . l:target_count
endfunction
nnoremap <silent> <leader>N <Cmd>call <SID>TabMove(v:count1)<CR>
nnoremap <silent> <leader>P <Cmd>call <SID>TabMove(tabpagenr('$')-v:count1)<CR>

function s:JoinWindow()
    let l:str_src_tab = input("Join window from : ")
    let l:src_tab = str2nr(l:str_src_tab)
    if l:src_tab <= 0 || tabpagenr('$') < l:src_tab
        echo "\rCan't find tab : " . l:str_src_tab . "  "
        return
    endif
    if l:src_tab == tabpagenr()
        echo "\rSource and target tabs must be different"
        return
    endif

    " Reopen buffer in a split
    let l:src_win = tabpagewinnr(l:src_tab)
    let l:buff_nr = tabpagebuflist(l:src_tab)[l:src_win-1]
    execute "split #" . l:buff_nr

    " Close window opened in src tab
    let l:win_id = win_getid(l:src_win, l:src_tab)
    call win_execute(l:win_id, "close")
endfunction
nnoremap <silent> <leader>u <Cmd>call <SID>JoinWindow()<CR>

nnoremap <leader>< <C-W>R
nnoremap <leader>> <C-W>r

" Send split to new tab
nnoremap <leader>! <C-W>T

" Scroll with C-[j|k]
nnoremap <C-j> <C-e>
vnoremap <C-j> <C-e>
nnoremap <C-k> <C-y>
vnoremap <C-k> <C-y>

" Exit insert mode with kj
inoremap kj <Esc>l
inoremap Kj <Esc>l
inoremap kJ <Esc>l
inoremap KJ <Esc>l

" Move line
nnoremap <silent> - ddp==
nnoremap <silent><expr> _ line('.') == line('$') \|\| line('.') == 1 ? "ddP==" : "ddkP=="
vnoremap <silent> - <Cmd>m '>+1<CR>gv=gv
vnoremap <silent> _ <Cmd>m '<-2<CR>gv=gv

" Add a new line
nnoremap <C-h> o<C-c>

" Swap words (use search() instead of normal to avoid adding pattern to search history)
nnoremap <Plug>(swap-words-fwd) "_yiw
            \<Cmd>keeppattern s/\v(%#\w+)(\_W+)(\w+)/\3\2\1/<CR><C-o>
            \<Cmd>call search('\w\+\_W\+') \|
            \ silent! call repeat#set("\<lt>Plug>(swap-words-fwd)")<CR>
nnoremap <Plug>(swap-words-bwd) "_yiw
            \<Cmd>call search('\w\+\_W\+', "b") \|
            \ keeppatterns s/\v(%#\w+)(\_W+)(\w+)/\3\2\1/ \|
            \ silent! call repeat#set("\<lt>Plug>(swap-words-bwd)")<CR><C-o>
nmap <silent> gt <Plug>(swap-words-fwd)
nmap <silent> gT <Plug>(swap-words-bwd)

" M-u and M-r to undo/redo in insert mode
inoremap <M-u> <C-o>u
inoremap <M-r> <C-o><C-r>

" Unmap Q and K
nnoremap Q <nop>
nnoremap K <nop>

" Y same as D or C
nnoremap Y y$

" Don't overwrite register when pasting over selection
vnoremap p pgvy

" Shift-Tab to dedent
inoremap <S-Tab> <C-d>

" Display current fold name
nnoremap <silent> z/ zc:echo foldtextresult(foldclosed('.'))[:&columns-13] \| normal zo<CR>

" Close all top level folds and reopen on current line
nnoremap z0 <Cmd>%foldclose<CR>zv

" Cancel autocomplete but reprint longest match
cmap <C-x> <C-l><C-n><C-p><C-u><C-y><C-z>

" Open autocomplete on next subdirectory
cnoremap <C-o> <Space><BS><C-z>

" Kill all windows except current
nnoremap <silent> <leader>o <Cmd>only<CR>

" Redraw screen in insert mode
inoremap <C-l> <C-o><C-l>

" Correct last misspelled word
inoremap <silent> <C-k>k <C-G>u<Esc>:call <SID>FixLineSpellError()<CR>`]a<C-G>u

" Delete line content instead of lines in visual mode
" (i.e. apply VISUAL_BLOCK behavior for all visual modes)
vnoremap D <C-v>D

" Quit visual mode with q
vnoremap q <C-c>

function! CommentAndDuplicate(type)
    let l:start_line = getpos("'[")[1]
    let l:end_line = getpos("']")[1]

    let l:lines = getline(l:start_line, l:end_line)
    execute l:start_line . "," . l:end_line . "Commentary"
    call append(l:end_line, l:lines)

    call setpos('.', [b:CAS_pos[0], l:end_line + 1 + b:CAS_pos[1] - l:start_line, b:CAS_pos[2], 0])
    unlet! b:CAS_pos
endfunction
call operator#user#define("CommentDuplicate", "CommentAndDuplicate", "let b:CAS_pos = getpos('.')")
vmap gs <Plug>(operator-CommentDuplicate)
nmap gs <Plug>(operator-CommentDuplicate)
nmap gss gsl

" Display word frequency for text-oriented files
augroup freqCount
    autocmd!

    autocmd FileType text,markdown,bib,tex nnoremap <buffer><silent> <leader>f <Cmd>Freq<CR>
augroup END


" {{{1 UTILITY FUNCTIONS / COMMANDS

" Function to unzoom before close and close both files when in diff mode
function s:CloseWin()
    if get(t:, 'zoomed', 0) | call zoom#toggle() | endif
    quit
    " tabpagewinnr first arg must be a number and 0 corresponds to curr tab
    if &diff && tabpagewinnr(0, '$') == 1 | quit | endif
endfunction

" Function to open file in split if buffer not empty
function s:OpenInSplitIfNotEmpty(file)
    if line('$') == 1 && getline(1) == ''
        exec 'e' a:file
    else
        exec 'vsplit' a:file
    end
endfunction

" Function to fix spelling error only on current line
function s:FixLineSpellError()
    let l:lnum = line('.')
    normal! [s
    if l:lnum != line('.') | return | endif
    normal! 1z=
endfunction

function s:DiffToggle()
    let l:curr_win_nr = winnr()
    if &diff
        windo diffoff
        execute l:curr_win_nr . 'wincmd w'
        return
    endif

    if tabpagewinnr(0, '$') != 2
        echohl ErrorMsg | echo "Can only diff two files" | echohl None
        return
    endif

    windo diffthis
    execute l:curr_win_nr . 'wincmd w'
endfunction

" Command to diff if there are two splits on current window
if !exists(":DiffToggle")
    command -bar DiffToggle call <SID>DiffToggle()
endif

function s:OpenHeader()
    let l:file = expand("%")

    " C++ files
    if l:file =~ "\\v.*\\.cpp$"
        let l:header = substitute(l:file, "\.cpp$", ".hpp", "")
        execute "vsplit " . l:header
        cd .
    elseif l:file =~ "\\v.*\\.hpp$"
        let l:source = substitute(l:file, "\.hpp$", ".cpp", "")
        execute "vsplit " . l:source
        cd .
        normal! r

    " C files
    elseif l:file =~ "\\v.*\\.c$"
        let l:header = substitute(l:file, "\.c$", ".h", "")
        execute "vsplit " . l:header
        cd .
    elseif l:file =~ "\\v.*\\.h$"
        let l:source = substitute(l:file, "\.h$", ".c", "")
        execute "vsplit " . l:source
        cd .
        normal! r

    else
        echom "Current file is not a source nor a header"
    endif
endfunction

if !exists(":OpenHeader")
    command -bar OpenHeader call <SID>OpenHeader()
endif

" Command to format json file
if !exists(":JsonPrettify")
    command JsonPrettify %!/usr/bin/env python -m json.tool
endif

" Command to print syntax currently active under the cursor
if !exists(":GetSynStack")
    command GetSynStack echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endif

" Command to write read-only file
if has("unix") && !exists(":W")
    command W execute 'silent! write !sudo /usr/bin/tee "%" >/dev/null' <bar> edit!
endif


" {{{1 FULLSCREEN HELP

function s:FullscreenHelpIfEmpty()
    silent! wincmd p
    if line('$') == 1 && getline(1) == '' | close | endif
    silent! wincmd p
endfunction

augroup fullscreenHelp
    autocmd!

    autocmd FileType help call <SID>FullscreenHelpIfEmpty()
augroup END


" {{{1 TAB LINE

function TabLine()
    let l:s = ''
    for l:tab in range(1, tabpagenr('$'))
        let l:winnr = tabpagewinnr(l:tab)
        let l:buflist = tabpagebuflist(l:tab)
        let l:bufnr = l:buflist[l:winnr - 1]
        let l:bufname = bufname(l:bufnr)
        let l:bufmodified = getbufvar(l:bufnr, "&mod")
        let l:base_color = (l:tab == tabpagenr() ? '%#TabLineSel#' : '%#TabLine#')
        let l:nb_color = (l:tab == tabpagenr() ? '%#TabLineNbSel#' : '%#TabLineNb#')

        let l:s .= '%' . l:tab . 'T' . l:base_color
        let l:s .= ' ' . l:nb_color . l:tab . l:base_color . " "
        let l:s .= (l:bufname != '' ? fnamemodify(l:bufname, ':t') : '[No Name]')

        let l:s .= (l:bufmodified ? ' [+]' : ' ')
    endfor

    let l:s .= '%#TabLineFill#'
    return l:s
endfunction

highlight TabLine cterm=underline ctermfg=15 ctermbg=242
highlight TabLineSel cterm=bold
highlight TabLineNbSel cterm=bold ctermfg=Brown
highlight TabLineNb cterm=underline ctermfg=Brown ctermbg=242
highlight TabLineFill ctermfg=Grey

set tabline=%!TabLine()


" {{{1 STATUS LINE

if !exists('g:statusline_git_branch')
    let g:statusline_git_branch = {}
    let g:statusline_git_is_tracked = {}
endif

let s:dev_null = (has("win32") ? "NUL" : "/dev/null")

let s:has_git = executable("git")
if s:has_git
    augroup setStatusline
        autocmd!

        autocmd BufRead,BufEnter * call s:SetStatuslineGit()
        autocmd BufDelete * silent! unlet g:statusline_git_branch[expand("<abuf>")] |
                          \ silent! unlet g:statusline_git_is_tracked[expand("<abuf>")]
    augroup END

    function s:SetStatuslineGit()
        let l:branch_command = "git -C " . expand("%:h") . " rev-parse --abbrev-ref HEAD 2> " . s:dev_null
        let l:git_branch = trim(system(l:branch_command))
        let l:track_command = "git -C " . expand("%:h") . " ls-files " . expand("%:p:S") . " 2> " . s:dev_null
        let l:git_tracked = trim(system(l:track_command))

        let g:statusline_git_branch[bufnr()] = (!empty(l:git_branch) ? ' ' . l:git_branch . ' ' : '')
        let g:statusline_git_is_tracked[bufnr()] = !empty(expand("%:p")) && !empty(l:git_tracked)
    endfunction
endif

function MyStatusLine()
    let l:curr_bufnr = winbufnr(g:statusline_winid)
    let l:git_branch = get(g:statusline_git_branch, l:curr_bufnr, "")
    let l:is_tracked = get(g:statusline_git_is_tracked, l:curr_bufnr, 0)

    let l:my_statusline  = ''
    if l:is_tracked | let l:my_statusline .= '%#PmenuSel#' . l:git_branch . '%0*' | endif
    let l:my_statusline .= ' %n ➤  %f%m'
    let l:my_statusline .= (get(b:, 'todo_mode', 0) ? '[T]' : '')
    if exists("*zoom#statusline")
        let l:my_statusline .= '%{zoom#statusline()}'
    endif

    " Git gutter
    if s:has_git && g:gitgutter_enabled && !empty(l:git_branch) && l:is_tracked
        let [a, m, r] = gitgutter#hunk#summary(l:curr_bufnr)
        let l:inactive = win_id2win(g:statusline_winid) != winnr() ? "NC" : ""
        let l:my_statusline .= ' ['
        let l:my_statusline .= '%#GitGutterStatuslineAdd' . l:inactive . '#+' . a . ' '
        let l:my_statusline .= '%#GitGutterStatuslineChange' . l:inactive . '#~' . m . ' '
        let l:my_statusline .= '%#GitGutterStatuslineDelete' . l:inactive . '#-' . r . '%0*'
        let l:my_statusline .= '] '
    endif

    let l:my_statusline .= '%='
    let l:my_statusline .= '%y %#PmenuSel# %3l/%L %3c| '
    return l:my_statusline
endfunction

set laststatus=2
set statusline=%!MyStatusLine()


" {{{1 FIXES

" Fix Ctrl-Arrow
noremap [1;5D <C-Left>
noremap! [1;5D <C-Left>
noremap [1;5C <C-Right>
noremap! [1;5C <C-Right>

" Fix Alt shortcuts <M-key>
let s:c = 'a'
while s:c <= 'z'
    exec "set <M-" . s:c . ">=\e" . s:c
    exec "imap \e" . s:c . " <M-" . s:c . ">"
    let s:c = nr2char(1+char2nr(s:c))
endwhile
let s:c = 'A'
while s:c < 'Z'
    exec "set <M-" . s:c . ">=\e" . s:c
    exec "imap \e" . s:c . " <M-" . s:c . ">"
    let s:c = nr2char(1+char2nr(s:c))
endwhile

" Toggle paste mode each time pasting from clipboard, and remove it after
" Source : https://coderwall.com/p/if9mda/automatically-set-paste-mode-in-vim-when-pasting-in-insert-mode
let &t_SI .= "\<Esc>[?2004h"
let &t_EI .= "\<Esc>[?2004l"

inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()

function XTermPasteBegin()
    set pastetoggle=<Esc>[201~
    set paste
    return ""
endfunction

" vim:fdm=marker
