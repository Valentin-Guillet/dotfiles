#!/bin/bash

# Fd instead of find
if command -v fd > /dev/null; then
    export FZF_DEFAULT_COMMAND="command fd --type file --no-ignore --hidden --follow --exclude .git"
    export FZF_CTRL_T_COMMAND="command fd --type file --no-ignore --hidden --follow --exclude .git"
    export FZF_ALT_C_COMMAND="command fd --type directory --no-ignore --hidden --follow --exclude .git"

    _fzf_compgen_path() {
        command fd --no-ignore --hidden --follow --exclude .git . "$1"
    }
    _fzf_compgen_dir() {
        command fd --type directory --no-ignore --hidden --follow --exclude .git . "$1"
    }
fi

export FZF_DEFAULT_OPTS="
    --ansi
    --tmux 75%
    --bind='?:toggle-preview'
    --preview-window 'right:60%:hidden:wrap'
    --preview '(batcat --wrap=never --color=always {} || cat {} || tree -C {}) 2> /dev/null'"


# Set up keybindings and completion, but with <M-g> instead of <C-t>
bind -x '"\eg": fzf-file-widget'

# We make two modifications to the fzf setup script:
# 1) By default, fzf assigns <M-r> to `redraw-current-line` instead of `revert-line`
#    To keep the revert keymap, we replace all these `\er` calls to `\ez` as it is not used
# 2) fzf replace all bash completions to detect the trigger (`**` by default)
#    For each command, it saves the default completion function, and calls it if the trigger is not present.
#    For some reason, if this function is just the default compgen function `_minimal` (bash-completion <2.12) or
#    `_comp_complete_minimal` (>= 2.12), it is skipped instead.
#    However, we want to call it in every case, because we add `_fuzzy_complete` to all completion functions.
#    For instance, `vim` by default use `_comp_complete_filedir_xspec` and thus fzf don't overwrite its completions,
#    whereas `nvim` use `_comp_complete_minimal` by default and the fzf script overwrites it, disabling fuzzy completion.
#    Indeed, the fzf file contains:
#        ```bash
#        if type _comp_load > /dev/null 2>&1; then
#            # _comp_load was added in bash-completion 2.12 to replace _completion_loader.
#            # We use it without -D option so that it does not use _comp_complete_minimal as the fallback.
#            _fzf_completion_loader=_comp_load
#        elif type __load_completion > /dev/null 2>&1; then
#            # In bash-completion 2.11, _completion_loader internally calls __load_completion
#            # and if it returns a non-zero status, it sets the default 'minimal' completion.
#            _fzf_completion_loader=__load_completion
#        elif type _completion_loader > /dev/null 2>&1; then
#            _fzf_completion_loader=_completion_loader
#        fi
#        ```
#   To fix this, we thus add the -D option to _comp_load (to fix >=2.12) and use _completion_loader instead of __load_completion (to fix ==2.11)
FZF_CTRL_T_COMMAND= eval "$(fzf --bash | \
    sed -e 's/\\er/\\ez/' \
        -e "s/_fzf_completion_loader=_comp_load/_fzf_completion_loader='_comp_load -D'/" \
        -e '/^elif type __load_completion/,+4c else')"

rzf() {
    rg --color=always --line-number --no-heading --smart-case "${*:-}" |
    fzf --ansi \
        --color "hl:-1:underline,hl+:-1:underline:reverse" \
        --delimiter : \
        --preview 'batcat --color=always {1} --highlight-line {2}' \
        --preview-window 'right:60%:hidden:wrap,+{2}-6' \
        --bind 'enter:become(vim {1} +{2})'
}
