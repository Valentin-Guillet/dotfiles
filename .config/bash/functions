#!/bin/bash


lsf() {
    if [ "$1" = "-i" ]
    then
        shift
        find "${2:-.}" -iname "*$1*" 2>/dev/null | grep -i "$1"
    else
        find "${2:-.}" -name "*$1*" 2>/dev/null | grep "$1"
    fi
}

psg() {
    ps aux | grep "$(echo $1 | sed 's/./[\0]/')"
}

ds() {
    echo "$(du -had 1 -t 1M "${1:-.}" 2>/dev/null | sort -h)"
}

gi() {
    git ${1:1} ${@:2}
}

pane_id() {
    tmux display-message -pt "${TMUX_PANE:?}" '#{pane_index}'
}

run() {
    if [ -e "main.py" ]; then
        python main.py ${@:1}
    elif [ -e "Makefile" ]; then
        make && [ -e "main" ] && ./main ${@:1}
    elif [ -e "main" ]; then
        ./main ${@:1}
    else
        echo "No main.py or Makefile to execute !"
    fi
}

ot() {
    mkdir $HOME/Pytest 2> /dev/null
    tmux new-window -n Pytest -c $HOME/Pytest
    tmux split-window -c $HOME/Pytest
    tmux select-pane -U
    tmux unbind -n M-g
    tmux bind -n M-g selectp -t 1 \\\; send-keys Escape :w Enter \\\; selectp -t 2 \\\; send-keys "py test.py" Enter \\\; selectp -t 1
    tmux send-keys "vim test.py" Enter
}

ct() {
    rm -r $HOME/Pytest 2> /dev/null
    tmux kill-window
    clear
}

pip_update() {
    pip3 list -o | cut -d ' ' -f 1 | tail -n +3 > /tmp/pip_list
    [[ $? == 1 ]] && return 1

    # If a pip update is available, start with it
    if grep -q "^pip$" /tmp/pip_list
    then
        cat <(echo pip) <(sed "/^pip$/d" /tmp/pip_list) > /tmp/pip_list.tmp
        mv /tmp/pip_list.tmp /tmp/pip_list
    fi

    # Remove the packages in pip_exclude file
    if [ ! "$1" = "-a" -a ! "$1" = '--all' ] && [ -s $HOME/.config/pip/pip_exclude ]
    then
        grep -v -f <(sed -e "/^\s*#.*$/d" -e "/^\s*$/d" $HOME/.config/pip/pip_exclude) /tmp/pip_list > /tmp/pip_list.tmp
        mv /tmp/pip_list.tmp /tmp/pip_list
    fi

    local exit_code=0
    if [ -s /tmp/pip_list ]
    then
        vim /tmp/pip_list
        cat /tmp/pip_list | xargs -n 1 pip3 install -U
        exit_code=$?
    fi
    rm /tmp/pip_list
    return $exit_code
}

ls_stack() {
    [[ $# != 1 ]] && echo "Usage: ls_stack {cmd}" && return 1

    local arg=""
    if [ "$(type -t "$1")" == "alias" ]
    then
        arg=$(alias "$1")
        arg="${arg#*\'}"
        arg="${arg::-1}"
        local first_cmd="${arg%% *}"

        # If sudo as first cmd, ignore it and take second cmd
        if [ "$first_cmd" == "sudo" ] && [ "$arg" != "sudo" ]
        then
            first_cmd="${arg#sudo }"
            first_cmd="${first_cmd%% *}"
        fi

        echo -ne "\e[38;5;9malias${RESET} $1 = '$arg'"
        [ -n "$(which $first_cmd)" ] && echo -ne " -> \e[1;32m$(which $first_cmd)${RESET}"
        echo
        arg="$first_cmd"
    else
        arg="$1"
    fi

    if [ -e "$arg" ]
    then
        local file="$arg"
    elif which "$arg" &>/dev/null
    then
        local file=$(which "$arg")
    else
        if command -v "$arg" > /dev/null
        then
            echo "$(type $arg)"
        else
            echo "Arg '$arg' is not an alias nor an executable"
        fi
        return 1
    fi
    local base_dir="$(dirname "$file")"

    local files=( "$file" )
    local line=$(ls -lh "$file")
    while [[ $line == *"->"* ]]
    do
        file=$(echo "$line" | rev | cut -d' ' -f1 | rev)
        [[ $file == /* ]] || file="$(realpath -s "$base_dir/$file")"

        files+=( "$file" )
        [ ! -h "$file" ] && break

        base_dir="$(dirname "$file")"
        line=$(ls -lh "$file")
    done

    ls -flh --color=force ${files[@]}
}

venv() {
    local venv_action=nothing
    local venv_file="$HOME/.local/state/python/venv_list"

    local help_msg
    read -r -d '' help_msg <<- EOM
        Tool to manage python virtual environments. Usage:
		  - venv [VENV_NAME]      # Toggle
		  - venv [--activate|-a] [VENV_NAME]
		  - venv [--deactivate|-d]
		  - venv [--create|-c] VENV_NAME
		  - venv [--match|-m] VENV_NAME [PATH]
		  - venv [--unmatch|-u] [PATH]
		  - venv [--venvs|-v]
		  - venv [--list|-l]
		  - venv --delete VENV_NAME
		  - venv --clean
	EOM

    if [[ $1 == --help || $1 == -h ]]; then
        echo "$help_msg"
        return 0
    fi

    # Create new venv and activate it
    if [[ $1 == --create || $1 == -c ]]; then
        local venv_name="$2"
        if [ -z "$venv_name" ]; then
            echo "Usage: venv --create VENV_NAME"
            return 1
        fi

        local venv_path="$HOME/.local/venvs/$venv_name"
        if [ -d "$venv_path" ]; then
            echo "Venv '$venv_name' already exists"
            return 1
        fi

        /usr/bin/python3 -m venv "$venv_path"
        echo "New venv $venv_name created at $venv_path"

        # Activate venv after creation
        venv_action=activate
        shift    # Put venv name in $1

    # Match path vith venv
    elif [[ $1 == --match || $1 == -m ]]; then
        local venv_name="$2"
        if [ -z "$venv_name" ]; then
            if [ "$VIRTUAL_ENV" = "$HOME/.local/venvs/base" ]; then
                echo "Usage: venv --match VENV_NAME [PATH]"
                return 1
            fi
            venv_name=$(basename "$VIRTUAL_ENV")
        fi

        # Check that given path exists
        local path="$(realpath "${3:-$(pwd)}" 2>/dev/null)"
        if [ ! -d "$path" ]; then
            echo "Invalid path: '$path'"
            return 1
        fi

        # Check that venv exists
        if [ ! -d "$HOME/.local/venvs/$venv_name" ]; then
            echo "No venv named '$venv_name'"
            return 1
        fi

        mkdir -p "$(dirname "$venv_file")"
        touch "$venv_file"

        # Already matched
        if grep -q "^$path	$venv_name\$" $venv_file; then
            echo "Already matched"
            return 0
        fi

        # Update match in venv_file
        # The bash substitution replaces all '/' by '\/' to escape them for sed
        sed -i "/^${path//\//\\/}\t/d" "$venv_file"
        echo -e "$path\t$venv_name" >> "$venv_file"
        echo "Matched path with venv '$venv_name'"

        # Activate venv if we're in target path and put venv name in $1
        [[ "$path" -ef "$(pwd)" ]] && venv_action=activate && shift

    # Unmatch path with venv
    elif [[ $1 == --unmatch || $1 == -u ]]; then
        local path="$(realpath "${2:-$(pwd)}")"
        if [ ! -d "$path" ]; then
            echo "Invalid path: '$path'"
            return 1
        fi

        local line=$(grep "^$path	" "$venv_file")
        if [ -z "$line" ]; then
            echo "Unmatched path"
        else
            local venv_name=$(cut -f2 <(echo "$line"))
            echo "Path unmatched with venv '$venv_name'"
            sed -i "/^${path//\//\\/}\t/d" "$venv_file"
        fi

    # List existing venvs
    elif [[ $1 == --venvs || $1 == -v ]]; then
        ls $HOME/.local/venvs/ --color=never

    # Print all venv matchings
    elif [[ $1 == --list || $1 == -l ]]; then
        if [[ -z $(grep '[^[:space:]]' "$venv_file" 2>/dev/null) ]] ; then
            echo "No venv matched"
        else
            cat $venv_file
        fi

    # Delete venv
    elif [[ $1 == --delete ]]; then
        if [ -z "$2" ]; then
            echo "Usage: venv --delete VENV_NAME"
            return 1
        fi

        local venv_name="$2"
        if [ "$venv_name" = "base" ]; then
            echo "Can't delete base venv"
            return 1
        fi

        # Check that venv exists
        if [ ! -d "$HOME/.local/venvs/$venv_name" ]; then
            echo "No venv named '$venv_name'"
            return 1
        fi

        read -p "Delete venv '$venv_name'? y/[N] " -r
        if [[ $REPLY =~ ^[Yy] ]]; then
            rm -r "$HOME/.local/venvs/$venv_name"
            echo "Venv '$venv_name' deleted"

            # If we deleted curr venv, we deactivate it
            [ "$venv_name" = "$(basename $VIRTUAL_ENV)" ] && venv_action=deactivate
        else
            echo "Aborted"
        fi

    # Clean path matched with unexisting venvs
    elif [[ $1 == --clean ]]; then
        if [[ -z $(grep '[^[:space:]]' "$venv_file" 2>/dev/null) ]] ; then
            echo "No venv matched"
            return 0
        fi

        local filtered_file=$(mktemp)
        local has_clean=0
        while read line; do
            local venv_name=$(echo "$line" | cut -f2)
            if [ -d "$HOME/.local/venvs/$venv_name" ]; then
                echo "$line" >> $filtered_file
            else
                echo "Unmatched $(echo "$line" | cut -f1) to nonexistent venv '$venv_name'"
                has_clean=1
            fi
        done < $venv_file
        mv $filtered_file $venv_file

        [ $has_clean = 0 ] && echo "No venv to clean!"

    # Deactivate curr venv
    elif [[ $1 == --deactivate || $1 == -d ]]; then
        venv_action=deactivate
        shift    # Put venv name in $1

    # Activate venv
    elif [[ $1 == --activate || $1 == -a ]]; then
        if [ "$2" = "base" ]; then
            # Ignore if base is already activated
            [ "$(basename $VIRTUAL_ENV)" = "base" ] && return 1

            venv_action=deactivate
        else
            venv_action=activate
        fi

        [ "$2" = "base" ] && venv_action=deactivate || venv_action=activate
        shift    # Put venv name in $1

    # Mistype
    elif [[ $1 == -* ]]; then
        echo "venv: invalid option"
        echo "$help_msg"
        return 1

    # Activating base is equivalent to deactivating curr venv
    elif [[ $1 == base ]]; then
        [ "$(basename $VIRTUAL_ENV)" = "base" ] && return 0
        venv_action=deactivate

    # Default: toggle venv
    else
        venv_action=toggle
    fi

    if [[ $venv_action == activate || $venv_action == toggle ]]; then
        local venv_name="$1"

        # No argument passed to cmd: get venv matched with curr path
        if [ -z "$venv_name" ]; then
            local path="$(realpath "$(pwd)")"
            venv_name=$(cut -f2 <(grep "^$path	" "$venv_file" 2>/dev/null))
        fi

        # Current path does not match any venv
        if [ -z "$venv_name" ]; then
            echo "No venv matched to current path found"
            return 1
        fi

        # Given venv does not exist
        if [ ! -d "$HOME/.local/venvs/$venv_name" ]; then
            echo "Venv '$venv_name' does not exist"
            return 1
        fi

        # If given venv is already activated, deactivate it if in toggle mode
        if [ "$venv_name" = "$(basename $VIRTUAL_ENV)" ]; then
            [ "$venv_action" == "toggle" ] && venv_action=deactivate || echo "Already activated"
        else
            [ "$venv_name" != "base" ] && unset VIRTUAL_ENV_DISABLE_PROMPT
            source $HOME/.local/venvs/$venv_name/bin/activate
        fi
    fi

    if [[ $venv_action = deactivate ]]; then
        if [ "$VIRTUAL_ENV" != "$HOME/.local/venvs/base" ]; then
            deactivate
            export VIRTUAL_ENV_DISABLE_PROMPT=1
            source $HOME/.local/venvs/base/bin/activate
        else
            echo "No venv currently activated"
        fi
    fi

    return 0
}

source "$HOME/.config/bash/_venv_completion"

