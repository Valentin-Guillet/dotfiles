#!/bin/bash

export VIRTUAL_ENV_DISABLE_PROMPT=1
if [ -d "$PYTHON_VENV_PATH" ]; then
    venv_path="$PYTHON_VENV_PATH"
else
    mkdir -p "$HOME/.local/state/python/"
    touch "$HOME/.local/state/python/venv_list"
    curr_path="$(realpath "$(pwd)")"
    while read vpath vname; do
        [[ "$curr_path/" != "$vpath/"* ]] && continue
        [[ ${#vpath} -lt ${#longest_match} ]] && continue
        longest_match="$vpath"
        venv_name="$vname"
    done < "$HOME/.local/state/python/venv_list"
    [ -n "$venv_name" ] && unset VIRTUAL_ENV_DISABLE_PROMPT
    venv_path="$HOME/.local/venvs/${venv_name:-base}"
fi

if [ -f "$venv_path/bin/activate" ]; then
    source "$venv_path/bin/activate"
else
    echo "No default virtual env created!"
fi
unset venv_path venv_name vpath vname longest_match curr_path

# Default REPL
py() {
    if [ -x "$(command -v ptpython)" ]; then
        ptpython "$@"
    else
        python3 "$@"
    fi
}

toggle_python_debugger() {
    mkdir -p "$XDG_STATE_HOME/python"
    local state_file="$XDG_STATE_HOME/python/default_debugger"
    if [ -s "$state_file" ]
    then
        echo -n > "$state_file"
        unset PYTHONBREAKPOINT
    else
        echo pudb > "$state_file"
        export PYTHONBREAKPOINT=pudb.set_trace
    fi
}

# Default debugger
if [ -x "$(command -v pudb)" ] && grep -qs "pudb" "$XDG_STATE_HOME/python/default_debugger"
then
    export PYTHONBREAKPOINT=pudb.set_trace
fi

# Pdir2 config
export PDIR2_CONFIG_FILE="$XDG_CONFIG_HOME/python/pdir.conf"
